services:
  dcs-postgres:
    image: postgres:15.3-alpine
    container_name: postgres_gerenciador_frota
    restart: always
    environment:
      POSTGRES_USER: gerenciador_frota_user
      POSTGRES_PASSWORD: root
      POSTGRES_DB: gerenciador_frota
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - fleet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gerenciador_frota_user -d gerenciador_frota"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_gerenciador_frota
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@reserva.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - dcs-postgres
    networks:
      - fleet-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fleet-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - fleet-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Microservi√ßos
  reserva-service:
    build:
      context: ./ReservaService
    container_name: reserva-service
    restart: always
    environment:
      PORT: 3000
      DB_HOST: dcs-postgres
      DB_PORT: 5432
      DB_USER: gerenciador_frota_user
      DB_PASSWORD: root
      DB_NAME: gerenciador_frota
      KAFKA_BROKER: kafka:9092
    depends_on:
      dcs-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - fleet-network

  veiculo-service:
    build:
      context: ./VeiculoService
    container_name: veiculo-service
    restart: always
    environment:
      PORT: 3001
      DB_HOST: dcs-postgres
      DB_PORT: 5432
      DB_USER: gerenciador_frota_user
      DB_PASSWORD: root
      DB_NAME: gerenciador_frota
      KAFKA_BROKER: kafka:9092
    depends_on:
      dcs-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks:
      - fleet-network

networks:
  fleet-network:
    driver: bridge
